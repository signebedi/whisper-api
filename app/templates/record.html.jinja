{% extends "base.html.jinja" %}

{% block title %}
Audio Recorder
{% endblock %}

{% block content %}
<h1>Record Your Audio</h1>
<p>Click "Start Recording" to begin and "Stop Recording" to end. You can then play back and submit your recording for transcription.</p>

<!-- Audio controls for playback -->
<audio id="playback" controls style="display:none;"></audio>

<div class="controls">

    <fieldset style="padding-top: 20px;" class="form-group">
        <button id="startRecording" class="btn btn-primary">Start Recording</button>
    </fieldset>
    <fieldset style="padding-top: 20px;" class="form-group">
        <button id="stopRecording" class="btn btn-secondary" disabled>Stop Recording</button>
    </fieldset>

</div>

<form id="uploadForm" style="display:none;">
    <fieldset style="padding-top: 20px;" class="form-group">
        <button type="submit" class="btn btn-success" id="submitButton">Submit</button>
        <div class="spinner-border spinner-border-sm loading-circle" role="status" style="display: none;"></div>
    </fieldset>
</form>

<div id="statusMessage" class="container mt-5 results-div"></div>
{% endblock %}

{% block scripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const startButton = document.getElementById('startRecording');
    const stopButton = document.getElementById('stopRecording');
    const playbackAudio = document.getElementById('playback');
    const uploadForm = document.getElementById('uploadForm');
    const statusMessage = document.getElementById('statusMessage');
    let mediaRecorder;
    let audioChunks = [];

    startButton.addEventListener('click', () => {
        navigator.mediaDevices.getUserMedia({ audio: true })
            .then(stream => {
                mediaRecorder = new MediaRecorder(stream);
                mediaRecorder.start();
                audioChunks = [];
                startButton.disabled = true;
                stopButton.disabled = false;
                playbackAudio.style.display = 'none';
                statusMessage.textContent = 'Recording...';

                mediaRecorder.addEventListener('dataavailable', event => {
                    audioChunks.push(event.data);
                });

                // Add headers to the fetch request
                const headers = new Headers({
                    'X-API-KEY': '{{ current_user.api_key }}'
                });

                mediaRecorder.addEventListener('stop', () => {
                    const audioBlob = new Blob(audioChunks, { type: 'audio/mp3' });
                    const audioUrl = URL.createObjectURL(audioBlob);
                    playbackAudio.src = audioUrl;
                    playbackAudio.style.display = 'block';
                    uploadForm.style.display = 'block';
                    statusMessage.textContent = '';
                    // Prepare the form data to be uploaded
                    uploadForm.onsubmit = function(e) {
                        e.preventDefault();

                        const submitButton = document.getElementById('submitButton');
                        const startRecording = document.getElementById('startRecording');
                        const stopRecording = document.getElementById('stopRecording');
                        const spinner = document.querySelector('.loading-circle');
                    
                        submitButton.disabled = true;  // Disable the submit button
                        startRecording.disabled = true;  // Disable the submit button
                        stopRecording.disabled = true;  // Disable the submit button
                        submitButton.innerText = 'Loading...';  // Change submit button text to 'Loading...'
                        spinner.style.display = ''; // Show the spinner

                        const formData = new FormData();
                        formData.append('audio', audioBlob);
                        fetch('/api/transcribe', { // Ensure this matches your Flask route
                            headers: headers,
                            method: 'POST',
                            body: formData,
                        })
                        .then(response => response.json())
                        .then(data => {
                            // statusMessage.textContent = 'Upload successful!';
                            // Check if the data contains the transcription result
                            if (data.content && data.content.full_text_timestamped) {
                                // statusMessage.innerHTML = `<p class="lead mb-3"><span class="badge bg-secondary" id="text-entry" onclick="copyToClipboard(this.parentNode)">Transcription:</span> ${data.content.full_text}</p>`;
                                statusMessage.innerHTML = `<h4>Transcription:</h4><p class="lead mb-3" onclick="copyToClipboard(this)">${data.content.full_text}</p>`;
                                statusMessage.style.display = 'block'; // Make sure to display the div if it was hidden
                            } else {
                                statusMessage.textContent = 'Transcription failed or no transcription available.';
                                statusMessage.style.display = 'block';
                            }
                            console.log(data); // Handle the response data
                        })
                        .catch(error => {
                            statusMessage.textContent = 'Upload failed.';
                            console.error(error);
                        })
                        .finally(() => {
                            submitButton.disabled = false;  // Re-enable the button
                            startRecording.disabled = false;  // Re-enable the button
                            stopRecording.disabled = false;  // Re-enable the button

                            submitButton.innerText = 'Submit';  // Change button text back to 'Submit'
                            spinner.style.display = 'none'; // Hide the spinner
                        });
                    };
                });
            })
            .catch(error => console.error(error));
    });

    stopButton.addEventListener('click', () => {
        mediaRecorder.stop();
        startButton.disabled = false;
        stopButton.disabled = true;
    });
});


function copyToClipboard(element) {
    // Copying to clipboard
    var text = element.innerText; // Get the text of the entire paragraph
    var elem = document.createElement("textarea");
    document.body.appendChild(elem);
    elem.value = text;
    elem.select();
    document.execCommand("copy");
    document.body.removeChild(elem);

    // Find the badge element (reference ID) within the paragraph
    // var badge = element.querySelector('.badge');

    // Tooltip activation
    var tooltip = new bootstrap.Tooltip(element, {
        title: "Copied!",
        trigger: "manual" 
    });

    tooltip.show(); // Show the tooltip

    // Hide tooltip after 2 seconds
    setTimeout(function() {
        tooltip.hide();
    }, 2000);
}


</script>
{% endblock %}
